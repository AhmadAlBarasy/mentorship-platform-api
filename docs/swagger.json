{
  "openapi": "3.0.0",
  "info": {
    "title": "Growthly Platform API Docs",
    "description": "",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000/api/v1",
      "description": "Local API Development"
    }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "summary": "Register a new user (Mentee, Mentor)",
        "tags": [
          "Authentication"
        ],
        "description": "Creates a new user on the platform, the user can join either as a Mentee, or as a Mentor",
        "operationId": "signupUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "id": {
                    "type": "string",
                    "example": "johndoe"
                  },
                  "headline": {
                    "type": "string",
                    "example": "Software Engineer at Google"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "johndoe@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User password (should meet platform's security policy)",
                    "example": "StrongP@ssword123"
                  },
                  "country": {
                    "type": "string",
                    "description": "ISO 3166-1 alpha-3 country code",
                    "example": "USA"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "mentee",
                      "mentor"
                    ],
                    "example": "mentee"
                  }
                },
                "required": [
                  "name",
                  "id",
                  "email",
                  "headline",
                  "password",
                  "country",
                  "role"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "User registered successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid email format"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Resource Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "id has already been taken"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Logs a User into the platform",
        "tags": [
          "Authentication"
        ],
        "description": "Authenticates a user and returns a token. The user must provide either an ID or an email, along with a password.",
        "operationId": "loginUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "johndoe@gmail.com",
                    "description": "User email address (required if ID is not provided)"
                  },
                  "id": {
                    "type": "string",
                    "example": "johndoe",
                    "description": "User ID (required if email is not provided)"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "StrongP@ssword123",
                    "description": "User password (always required)"
                  }
                },
                "required": [
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid id/email or password"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Logs the user out of the platform",
        "tags": [
          "Authentication"
        ],
        "description": "Logs the user out by clearing the authentication token cookie. Requires an active session (partial or full).",
        "operationId": "logoutUser",
        "responses": {
          "200": {
            "description": "User logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Logged out successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized, No token provided"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/confirm-email": {
      "post": {
        "summary": "Confirm user's email",
        "tags": [
          "Authentication"
        ],
        "description": "Confirms a user's email address, requires a partial session",
        "operationId": "confirmEmail",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "52fe111a0a24ee5a"
                  }
                },
                "required": [
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email has been confirmed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Email confirmed successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid confirmation code"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "summary": "Forgot password",
        "tags": [
          "Authentication"
        ],
        "description": "Sends a password reset email to the user",
        "operationId": "forgotPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "johndoe@gmail.com"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "An email with the reset link has been sent to johndoe@gmail.com"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid email format"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "summary": "Reset password",
        "tags": [
          "Authentication"
        ],
        "description": "Resets the user's password using a provided token",
        "operationId": "resetPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "NewStrongP@ssword123"
                  },
                  "token": {
                    "type": "string",
                    "example": "389f57d8d05040c60ae9648f94e1018a"
                  }
                },
                "required": [
                  "password",
                  "token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password has been reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Password has been reset successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Reset token has expired"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/update-password": {
      "post": {
        "summary": "Update password",
        "tags": [
          "Authentication"
        ],
        "description": "Updates the authenticated user's password. Requires a full session",
        "operationId": "updatePassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "NewStrongP@ssword123"
                  }
                },
                "required": [
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password has been updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Password has been updated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Password must be at least 8 characters long"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/update-2fa": {
      "post": {
        "summary": "Enable or disable Two-Factor Authentication (2FA)",
        "tags": ["Authentication"],
        "description": "Updates the 2FA status for the authenticated user based on the `action` provided in the request body. Requires a full session (email must be verified).",
        "operationId": "update2FA",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "enum": ["enable", "disable"],
                    "example": "enable",
                    "description": "Set to `enable` to turn on 2FA or `disable` to turn it off"
                  }
                },
                "required": ["action"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "2FA status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Two-factor authentication has been enabled."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid action provided or 2FA already in requested state",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid action. Use \"enable\" or \"disable\"."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized, No token provided"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - partial sessions cannot modify 2FA",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You are not allowed to perform this action"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get basic profile of a user by ID",
        "tags": [
          "Users"
        ],
        "description": "Requires the user to be authenticated. Returns public profile information of a user, including ID, name, email, role, and associated links. Sensitive fields such as passwords and authentication tokens are excluded.",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the user.",
            "schema": {
              "type": "string",
              "example": "johndoe"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's profile information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "johndoe"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "johndoe@gmail.com"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "headline": {
                          "type": "string",
                          "example": "Software Engineer"
                        },
                        "bio": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "example": null
                        },
                        "country": {
                          "type": "string",
                          "example": "USA"
                        },
                        "imageUrl": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "example": null
                        },
                        "dateJoined": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2025-07-11T16:58:26.127Z"
                        },
                        "skills": {
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "HTML",
                            "CSS",
                            "JavaScript"
                          ]
                        },
                        "timezone": {
                          "type": "string",
                          "example": "Etc/UTC"
                        },
                        "role": {
                          "type": "string",
                          "example": "MENTOR"
                        },
                        "links": {
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "example": "GitHub"
                              },
                              "url": {
                                "type": "string",
                                "format": "uri",
                                "example": "https://github.com/johndoe"
                              }
                            }
                          },
                          "example": [
                            {
                              "name": "GitHub",
                              "url": "https://github.com/johndoe"
                            },
                            {
                              "name": "Portfolio",
                              "url": "https://johndoe.dev"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized, No token provided"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Get current authenticated user's profile",
        "tags": [
          "Users"
        ],
        "description": "Requires the user to be authenticated. Returns basic user information including ID, name, email, role, and other optional profile fields.",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's profile information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "johndoe"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "johndoe@gmail.com"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "headline": {
                          "type": "string",
                          "example": "Software Engineer"
                        },
                        "bio": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "example": null
                        },
                        "country": {
                          "type": "string",
                          "example": "USA"
                        },
                        "imageUrl": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "example": null
                        },
                        "dateJoined": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2025-07-11T16:58:26.127Z"
                        },
                        "skills": {
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "HTML",
                            "CSS",
                            "JavaScript"
                          ]
                        },
                        "timezone": {
                          "type": "string",
                          "example": "Etc/UTC"
                        },
                        "role": {
                          "type": "string",
                          "example": "MENTOR"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized, No token provided"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update authenticated user's profile",
        "tags": [
          "Users"
        ],
        "description": "Requires the user to be authenticated. Allows the user to update their profile information. At least one updatable field must be provided.",
        "operationId": "updateAuthenticatedUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "minProperties": 1,
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 50,
                    "example": "John Doe"
                  },
                  "headline": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "Full-Stack Developer"
                  },
                  "bio": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "I'm passionate about clean code and teaching developers."
                  },
                  "country": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 3,
                    "description": "A valid ISO 3166-1 alpha-3 country code",
                    "example": "USA"
                  },
                  "timezone": {
                    "type": "string",
                    "description": "A valid IANA time zone name",
                    "example": "America/New_York"
                  },
                  "skills": {
                    "type": "array",
                    "maxItems": 300,
                    "items": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "example": [
                      "JavaScript",
                      "React",
                      "Node.js"
                    ]
                  }
                },
                "example": {
                  "headline": "Backend Engineer",
                  "bio": "10+ years in distributed systems",
                  "skills": [
                    "Node.js",
                    "Docker",
                    "PostgreSQL"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the user's profile.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "User updated successfully"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "johndoe"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "johndoe@gmail.com"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "headline": {
                          "type": "string",
                          "example": "Backend Engineer"
                        },
                        "bio": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "example": "10+ years in distributed systems"
                        },
                        "country": {
                          "type": "string",
                          "example": "USA"
                        },
                        "imageUrl": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "example": null
                        },
                        "dateJoined": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2025-07-11T16:58:26.127Z"
                        },
                        "skills": {
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "Node.js",
                            "Docker",
                            "PostgreSQL"
                          ]
                        },
                        "timezone": {
                          "type": "string",
                          "example": "America/New_York"
                        },
                        "role": {
                          "type": "string",
                          "example": "MENTOR"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or no valid fields provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "At least 1 attribute should be provided to update"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized, No token provided"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/me/links": {
      "get": {
        "summary": "Get all links associated with the authenticated user",
        "tags": [
          "UserLinks"
        ],
        "description": "Requires the user to be authenticated. Returns an array of all the user's added links.",
        "operationId": "getAuthenticatedUserLinks",
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's links.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "example": "cdd40d2c-8ed9-48fb-aea6-6222dbbcfc9b"
                          },
                          "linkName": {
                            "type": "string",
                            "example": "GitHub"
                          },
                          "linkUrl": {
                            "type": "string",
                            "format": "uri",
                            "example": "https://github.com/johndoe"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized, No token provided"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add a new link to the authenticated user's profile",
        "tags": [
          "UserLinks"
        ],
        "description": "Requires the user to be authenticated. Adds a new link (e.g. portfolio or social profile) to the user's profile.",
        "operationId": "addAuthenticatedUserLink",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "linkName",
                  "linkUrl"
                ],
                "properties": {
                  "linkName": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "Portfolio"
                  },
                  "linkUrl": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://johndoe.dev"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully added a new link.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Link added successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Link URL must be a valid HTTPS URL"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized, No token provided"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/me/links/{id}": {
      "patch": {
        "summary": "Update an existing link for the authenticated user",
        "tags": [
          "UserLinks"
        ],
        "description": "Requires the user to be authenticated. Allows the user to update an existing link by its ID. At least one of `linkName` or `linkUrl` must be provided.",
        "operationId": "updateAuthenticatedUserLink",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the link to update.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "example": "cdd40d2c-8ed9-48fb-aea6-6222dbbcfc9b"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "minProperties": 1,
                "properties": {
                  "linkName": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "Updated GitHub"
                  },
                  "linkUrl": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://github.com/newhandle"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the link.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Link updated Successfully"
                    },
                    "link": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "cdd40d2c-8ed9-48fb-aea6-6222dbbcfc9b"
                        },
                        "linkName": {
                          "type": "string",
                          "example": "Updated GitHub"
                        },
                        "linkUrl": {
                          "type": "string",
                          "format": "uri",
                          "example": "https://github.com/newhandle"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or no valid fields provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "At least 1 attribute should be provided to update"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Link not found or does not belong to the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Link not found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized, No token provided"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an existing link for the authenticated user",
        "tags": [
          "UserLinks"
        ],
        "description": "Requires the user to be authenticated. Deletes a link belonging to the user by its ID.",
        "operationId": "deleteAuthenticatedUserLink",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the link to delete.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "minLength": 36,
              "maxLength": 36,
              "example": "cdd40d2c-8ed9-48fb-aea6-6222dbbcfc9b"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the link. No content returned."
          },
          "404": {
            "description": "Link not found or does not belong to the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Link not found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized, No token provided"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/me/profile-picture": {
      "put": {
        "summary": "Upload or update profile picture",
        "tags": [
          "Users"
        ],
        "description": "Uploads a new profile picture for the authenticated user. If an image already exists, it will be replaced. Only image files are allowed, and the file size must not exceed 2MB.",
        "operationId": "uploadOrUpdateProfilePicture",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "The image file to upload (max 2MB)."
                  }
                },
                "required": [
                  "image"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile picture uploaded or updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile picture uploaded successfully"
                    },
                    "url": {
                      "type": "string",
                      "format": "uri",
                      "example": "https://xyz.supabase.co/storage/v1/object/public/growthly-storage/avatars/user123.png"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - no image provided or unsupported file type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "No image provided"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - failed to upload image.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Upload to Supabase failed"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete profile picture",
        "tags": [
          "Users"
        ],
        "description": "Deletes the authenticated user’s existing profile picture from Supabase storage.",
        "operationId": "deleteProfilePicture",
        "responses": {
          "204": {
            "description": "Profile picture deleted successfully."
          },
          "404": {
            "description": "No profile picture found to delete.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource to be deleted not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/me/join-requests": {
      "get": {
        "summary": "Get the authenticated user's community join requests",
        "tags": ["Users"],
        "description": "Retrieves all community join requests submitted by the currently authenticated user. Only MENTEEs and MENTORs can access this endpoint.",
        "operationId": "getAuthenticatedUserJoinRequests",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Join requests retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "joinRequests": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "17a11b27-3360-4bba-bcda-b004e08482cb"
                          },
                          "userId": {
                            "type": "string",
                            "example": "ahmad"
                          },
                          "communityId": {
                            "type": "string",
                            "example": "growthly-dev"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-07-27T18:26:02.720Z"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized, No token provided"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/report": {
      "post": {
        "summary": "Report a user",
        "description": "Report a user who violated platform guidelines.",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user being reported"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "violation": {
                    "type": "string",
                    "example": "Harassment"
                  },
                  "additionalDetails": {
                    "type": "string",
                    "example": "Sent inappropriate messages"
                  }
                },
                "required": [
                  "violation"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Report submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "User reported successfully."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "cannot reporting yourself",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You cannot report yourself!"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Cannot report an admin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You cannot report an ADMIN."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "User already reported",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You have already reported this user."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },"/communities": {
      "post": {
        "summary": "Create a new community",
        "tags": [
          "Communities"
        ],
        "description": "Allows an authenticated user with the COMMUNITY_MANAGER role to create a new community. Each user may create only one community. All fields are required.",
        "operationId": "createCommunity",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "maxLength": 32,
                    "example": "tech-lounge"
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "Tech Lounge"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "A community for developers, designers, and tech enthusiasts to collaborate and share ideas."
                  }
                },
                "required": [
                  "id",
                  "name",
                  "description"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Community created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Community created successfully"
                    },
                    "community": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "tech-lounge"
                        },
                        "name": {
                          "type": "string",
                          "example": "Tech Lounge"
                        },
                        "description": {
                          "type": "string",
                          "example": "A community for developers, designers, and tech enthusiasts to collaborate and share ideas."
                        },
                        "managerId": {
                          "type": "string",
                          "example": "user_abc123"
                        },
                        "imageUrl": {
                          "type": "string",
                          "format": "uri",
                          "example": null
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2025-07-17T15:22:10.500Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation failed or ID already taken.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "tech-lounge has already been taken"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized, No token provided"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user lacks COMMUNITY_MANAGER role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden: You are not authorized to do this action"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - user already has a community.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You already have a community"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/communities/my": {
      "get": {
        "summary": "Get authenticated user's community",
        "tags": [
          "Communities"
        ],
        "description": "Retrieves the community that is managed by the currently authenticated user. Only users with the COMMUNITY_MANAGER role can access this endpoint.",
        "operationId": "getAuthenticatedUserCommunity",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Authenticated user's community retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "community": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "growthly-dev"
                        },
                        "name": {
                          "type": "string",
                          "example": "Growthly Developer Community"
                        },
                        "description": {
                          "type": "string",
                          "example": "A community for developers building Growthly features and tools."
                        },
                        "imageUrl": {
                          "type": "string",
                          "format": "uri",
                          "nullable": true,
                          "example": "https://your-supabase-url.storage.supabase.co/growthly-bucket/communities/growthly-dev.webp"
                        },
                        "managerId": {
                          "type": "string",
                          "example": "user_123456789"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-07-01T14:20:00.000Z"
                        },
                        "memberCount": {
                          "type": "integer",
                          "example": 125
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Community not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You don't have a community"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update the authenticated manager's community",
        "tags": [
          "Communities"
        ],
        "description": "Allows a COMMUNITY_MANAGER to update their own community's information such as name or description. Requires authentication and appropriate role.",
        "operationId": "updateMyCommunity",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "Tech Lounge"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "A friendly community for developers, designers, and tech enthusiasts to collaborate and grow."
                  }
                },
                "minProperties": 1
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the community.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Community updated successfully"
                    },
                    "community": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "tech-lounge"
                        },
                        "name": {
                          "type": "string",
                          "example": "Tech Lounge"
                        },
                        "description": {
                          "type": "string",
                          "example": "A friendly community for developers, designers, and tech enthusiasts to collaborate and grow."
                        },
                        "imageUrl": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "format": "uri",
                          "example": "https://example.com/images/tech-lounge.png"
                        },
                        "managerId": {
                          "type": "string",
                          "example": "user_abc123"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2025-07-17T15:22:10.500Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - no updatable attributes provided or invalid format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "At least 1 attribute should be provided to update"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - user has no community to update",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You don't have a community"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized, No token provided"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/communities/my/picture": {
      "put": {
        "summary": "Upload or update the community image",
        "tags": [
          "Communities"
        ],
        "description": "Allows a COMMUNITY_MANAGER to upload or update the image associated with their community. The image must be provided as multipart/form-data under the key `image`. This endpoint replaces any previously uploaded image.",
        "operationId": "uploadOrUpdateCommunityImage",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "The image file to upload (must be an image type, max size 2MB)"
                  }
                },
                "required": [
                  "image"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Image uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Community image uploaded successfully"
                    },
                    "url": {
                      "type": "string",
                      "format": "uri",
                      "example": "https://your-supabase-url.storage.supabase.co/communities/community-123.webp"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing or invalid image file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "No image provided"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Community not found for authenticated manager",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You don't have a community"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Image uploading failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Image uploading failed"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the community image",
        "tags": [
          "Communities"
        ],
        "description": "Allows a COMMUNITY_MANAGER to delete the image associated with their community. If no image exists, it returns a 404 error.",
        "operationId": "deleteCommunityImage",
        "responses": {
          "204": {
            "description": "Image deleted successfully (no content)"
          },
          "404": {
            "description": "No community or image found to delete",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Resource to be deleted not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to delete the image from storage",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to delete image"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/communities/my/join-requests": {
      "get": {
        "summary": "Get join requests for the manager's community",
        "tags": [
          "Communities"
        ],
        "description": "Retrieves all pending join requests submitted by users who wish to join the authenticated community manager's community.",
        "operationId": "getAuthenticatedManagerCommunityJoinRequests",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Join requests retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "joinRequests": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "clwovwdd70000z5bpv6p5ehhx"
                          },
                          "userId": {
                            "type": "string",
                            "example": "clwovd9qj00002n5bm6zhebn7"
                          },
                          "communityId": {
                            "type": "string",
                            "example": "growthly-dev"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-07-24T18:26:02.720Z"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Manager has no associated community",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You don't have a community"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Resolve a community join request",
        "tags": [
          "Communities"
        ],
        "description": "Allows an authenticated community manager to resolve a pending join request by either accepting or rejecting it. Accepting a request adds the user to the community participants and removes the request. Rejecting simply removes the request.",
        "operationId": "resolveCommunityJoinRequest",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "action"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The 36-character UUID of the join request",
                    "example": "09b13094-35a4-4d0d-b477-aa43c57aff3d"
                  },
                  "action": {
                    "type": "string",
                    "enum": [
                      "accept",
                      "reject"
                    ],
                    "description": "The action to perform on the join request",
                    "example": "accept"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Join request has been resolved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Join request has been resolved successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Either the manager doesn't have a community or the join request was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Join request not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/communities/my/memberships": {
      "get": {
        "summary": "Get communities where the user is a member",
        "tags": [
          "Communities"
        ],
        "description": "Returns a list of communities that the currently authenticated user is a member of.",
        "operationId": "getAuthenticatedUserMemberships",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Memberships retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "memberships": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "tech-lounge"
                          },
                          "name": {
                            "type": "string",
                            "example": "Tech Lounge"
                          },
                          "description": {
                            "type": "string",
                            "example": "A community for developers, designers, and tech enthusiasts."
                          },
                          "imageUrl": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "format": "uri",
                            "example": "https://xyz.supabase.co/storage/v1/object/public/growthly-storage/communities/iug.png"
                          },
                          "joinedAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-07-24T18:26:02.720Z"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user role is not MENTEE or MENTOR",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden: You are not authorized to do this action"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Leave a community",
        "tags": ["Communities"],
        "description": "Allows an authenticated MENTEE or MENTOR to leave a community they are a member of. This action removes the user's participation record from the specified community.",
        "operationId": "leaveCommunity",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "string",
                    "maxLength": 32,
                    "description": "The ID of the community to leave",
                    "example": "growthly-dev"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully left the community. No content returned."
          },
          "400": {
            "description": "Bad request - user is not a member of the specified community",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You are not a member of this community"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Community not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Community not found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized, No token provided"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/communities/my/members": {
      "get": {
        "summary": "Get all members of the manager's community",
        "tags": ["Communities"],
        "description": "Retrieves all members of the community managed by the authenticated COMMUNITY_MANAGER. Includes member information such as ID, name, role, and joined date.",
        "operationId": "getAuthenticatedManagerCommunityMembers",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Community members retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "members": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "user_abc123"
                          },
                          "name": {
                            "type": "string",
                            "example": "John Doe"
                          },
                          "email": {
                            "type": "string",
                            "format": "email",
                            "example": "john.doe@example.com"
                          },
                          "role": {
                            "type": "string",
                            "enum": ["MENTEE", "MENTOR", "ADMIN"],
                            "example": "MENTOR"
                          },
                          "joinedAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-07-26T12:34:56.789Z"
                          },
                          "headline": {
                            "type": "string",
                            "example": "Software Engineer at XYZ"
                          },
                          "imageUrl": {
                            "type": ["string", "null"],
                            "format": "uri",
                            "example": "https://your-supabase-url.storage.supabase.co/avatars/user_abc123.webp"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Community not found for the authenticated manager",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You don't have a community"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized, No token provided"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove a member from the manager's community",
        "tags": ["Communities"],
        "description": "Allows the authenticated COMMUNITY_MANAGER to remove a specific user from their community. The user must currently be a member of the manager's community.",
        "operationId": "removeCommunityMember",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "string",
                    "maxLength": 32,
                    "description": "The ID of the user to remove",
                    "example": "user_abc123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User removed from the community successfully. No content returned."
          },
          "404": {
            "description": "Either the manager has no community or the user is not a member",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "This user is not a member of your community"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized, No token provided"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/communities/{id}": {
      "get": {
        "summary": "Get community details",
        "tags": ["Communities"],
        "description": "Fetches the public details of a specific community by its ID. The response includes the number of participants, public image URL (if available), and the membership status of the authenticated user.",
        "operationId": "getCommunityDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the community to retrieve",
            "schema": {
              "type": "string",
              "maxLength": 32,
              "example": "growthly-dev"
            }
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Community details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "community": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "growthly-dev"
                        },
                        "name": {
                          "type": "string",
                          "example": "Growthly Developer Community"
                        },
                        "description": {
                          "type": "string",
                          "example": "A community for developers building Growthly features and tools."
                        },
                        "imageUrl": {
                          "type": "string",
                          "format": "uri",
                          "nullable": true,
                          "example": "https://your-supabase-url.storage.supabase.co/growthly-bucket/communities/growthly-dev.webp"
                        },
                        "managerId": {
                          "type": "string",
                          "example": "user_123456789"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-07-01T14:20:00.000Z"
                        },
                        "memberCount": {
                          "type": "integer",
                          "example": 125
                        }
                      }
                    },
                    "membershipStatus": {
                      "type": "string",
                      "description": "Membership status of the authenticated user with respect to the requested community",
                      "enum": ["NONE", "MEMBER", "PENDING"],
                      "example": "MEMBER"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Community not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Community not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/communities/{id}/join-requests": {
      "post": {
        "summary": "Request to join a community",
        "tags": [
          "Communities"
        ],
        "description": "Allows a Mentee or Mentor to request to join a specific community. A user cannot submit multiple requests to the same community.",
        "operationId": "requestToJoinCommunity",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the community to join",
            "required": true,
            "schema": {
              "type": "string",
              "example": "growthly-dev"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Join request submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Join request submitted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Community not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Community not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Join request already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You've already submitted a request to join this community"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Withdraw join request from a community",
        "tags": [
          "Communities"
        ],
        "description": "Allows a Mentee or Mentor to withdraw a previously submitted request to join a specific community.",
        "operationId": "withdrawCommunityJoinRequest",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the community",
            "required": true,
            "schema": {
              "type": "string",
              "example": "growthly-dev"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Join request withdrawn successfully"
          },
          "404": {
            "description": "Community not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Community not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "No join request to withdraw",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You haven't submitted a request to join this community"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/communities/{id}/members": {
      "get": {
        "summary": "Get all members of a community",
        "tags": ["Communities"],
        "description": "Retrieves a list of all users who are members of the specified community. Accessible only to Admins, the community's manager, or existing MENTOR/MENTEE participants.",
        "operationId": "getCommunityMembers",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the community",
            "schema": {
              "type": "string",
              "example": "growthly-dev"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of community members.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "members": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "user_abc123"
                          },
                          "name": {
                            "type": "string",
                            "example": "John Doe"
                          },
                          "email": {
                            "type": "string",
                            "format": "email",
                            "example": "john.doe@example.com"
                          },
                          "role": {
                            "type": "string",
                            "enum": ["MENTEE", "MENTOR", "ADMIN"],
                            "example": "MENTOR"
                          },
                          "joinedAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-07-26T12:34:56.789Z"
                          },
                          "headline": {
                            "type": "string",
                            "example": "Software Engineer at XYZ"
                          },
                          "imageUrl": {
                            "type": ["string", "null"],
                            "format": "uri",
                            "example": "https://your-supabase-url.storage.supabase.co/avatars/user_abc123.webp"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user is not allowed to access members of this community",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You are not allowed to access community members"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/services": {
      "post": {
        "summary": "Create a new service (Mentor only)",
        "tags": ["Services"],
        "description": "Creates a new mentoring service for the authenticated mentor. A service includes its details, session duration, and availability windows (both recurring weekly days and one-off exceptions). Availability windows are validated to ensure they meet duration constraints, do not overlap, and meet the session time requirement.",
        "operationId": "createService",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id", "type", "description", "sessionTime"],
                "properties": {
                  "id": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9_]+$",
                    "minLength": 3,
                    "maxLength": 32,
                    "description": "Unique service identifier (within the mentor's account). Letters, numbers, and underscores only."
                  },
                  "type": {
                    "type": "string",
                    "maxLength": 50,
                    "description": "Service type or category (e.g., 'Career Coaching')."
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 300,
                    "description": "Detailed description of the service."
                  },
                  "sessionTime": {
                    "type": "integer",
                    "minimum": 10,
                    "maximum": 360,
                    "description": "Length of a single bookable session in minutes. Must be a multiple of 5."
                  },
                  "days": {
                    "type": "object",
                    "description": "Recurring weekly availabilities. Keys are day names, values are arrays of availability windows.",
                    "additionalProperties": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": ["startTime", "duration"],
                        "properties": {
                          "startTime": {
                            "type": "string",
                            "pattern": "^([01]\\d|2[0-3]):([0-5]\\d)$",
                            "description": "Start time in HH:mm 24-hour format."
                          },
                          "duration": {
                            "type": "integer",
                            "minimum": 10,
                            "maximum": 360,
                            "description": "Duration of the availability window in minutes."
                          }
                        }
                      },
                      "minItems": 1
                    },
                    "example": {
                      "monday": [
                        { "startTime": "09:00", "duration": 60 },
                        { "startTime": "13:00", "duration": 120 }
                      ]
                    }
                  },
                  "exceptions": {
                    "type": "object",
                    "description": "One-off date-specific availabilities. Keys are dates in YYYY-MM-DD format.",
                    "additionalProperties": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": ["startTime", "duration"],
                        "properties": {
                          "startTime": {
                            "type": "string",
                            "pattern": "^([01]\\d|2[0-3]):([0-5]\\d)$",
                            "description": "Start time in HH:mm 24-hour format."
                          },
                          "duration": {
                            "type": "integer",
                            "minimum": 10,
                            "maximum": 360,
                            "description": "Duration of the availability window in minutes."
                          }
                        }
                      },
                      "minItems": 1
                    },
                    "example": {
                      "2025-08-20": [
                        { "startTime": "14:00", "duration": 60 }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "Standard Service Creation": {
                  "value": {
                    "id": "career_coaching",
                    "type": "Career Coaching",
                    "description": "Helping mentees prepare for job interviews and career growth.",
                    "sessionTime": 60,
                    "days": {
                      "monday": [
                        { "startTime": "09:00", "duration": 120 },
                        { "startTime": "14:00", "duration": 60 }
                      ]
                    },
                    "exceptions": {
                      "2025-08-15": [
                        { "startTime": "10:00", "duration": 90 }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Service created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "message": { "type": "string", "example": "Service created successfully" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error — request body failed schema or availability windows overlap / are shorter than sessionTime.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "error" },
                    "message": { "type": "string", "example": "Conflict on monday: [09:00 - 10:00] overlaps with [09:30 - 10:30]" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized — user not authenticated or session expired."
          },
          "403": {
            "description": "Forbidden — user is not a mentor."
          },
          "409": {
            "description": "Conflict — service ID already exists for this mentor."
          }
        }
      }
    },
    "/services/my": {
      "get": {
        "summary": "Get authenticated mentor's services",
        "tags": ["Services"],
        "description": "Fetches all services offered by the authenticated mentor. The response includes availability information and counts for pending and accepted session requests.",
        "operationId": "getMentorServices",
        "responses": {
          "200": {
            "description": "List of mentor's services retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "services": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "growth_coaching"
                          },
                          "type": {
                            "type": "string",
                            "example": "Career Coaching"
                          },
                          "description": {
                            "type": "string",
                            "example": "1-on-1 sessions to help you grow in your tech career."
                          },
                          "sessionTime": {
                            "type": "integer",
                            "example": 30,
                            "description": "Duration of each session in minutes"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-08-07T09:00:00.000Z"
                          },
                          "active": {
                            "type": "boolean",
                            "example": true,
                            "description": "Indicates if the service is currently active"
                          },
                          "pendingRequestsCount": {
                            "type": "integer",
                            "example": 4,
                            "description": "Number of pending session requests for this service"
                          },
                          "acceptedRequestsCount": {
                            "type": "integer",
                            "example": 2,
                            "description": "Number of accepted session requests for this service"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Only mentors can access this endpoint"
          }
        }
      }
    },
    "/services/my/{id}": {
      "get": {
        "summary": "Get your own service by ID",
        "tags": ["Services"],
        "description": "Retrieves a service that belongs to the authenticated mentor, including availability and exceptions.",
        "operationId": "getMyServiceById",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the service to retrieve",
            "schema": {
              "type": "string",
              "example": "svc_abc123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Service fetched successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "svc_abc123"
                        },
                        "type": {
                          "type": "string",
                          "example": "MENTORSHIP"
                        },
                        "description": {
                          "type": "string",
                          "example": "Guidance for junior developers"
                        },
                        "sessionTime": {
                          "type": "integer",
                          "example": 60,
                          "description": "Duration of each session in minutes"
                        },
                        "days": {
                          "type": "object",
                          "example": {
                            "monday": [
                              {
                                "id": "a81bc81b-dead-4e5d-abff-90865d1e13b1",
                                "startTime": "09:00",
                                "duration": 60
                              }
                            ],
                            "wednesday": [
                              {
                                "id": "a81bc81b-dead-4e5d-abff-90865d1e13b1",
                                "startTime": "15:30",
                                "duration": 45
                              }
                            ]
                          }
                        },
                        "exceptions": {
                          "type": "object",
                          "example": {
                            "2025-08-15": [
                              {
                                "id": "a81bc81b-dead-4e5d-abff-90865d1e13b1",
                                "startTime": "10:00",
                                "duration": 60
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Fail" },
                    "message": { "type": "string", "example": "Unauthorized, No token provided" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user is not a mentor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Fail" },
                    "message": { "type": "string", "example": "Forbidden: You are not authorized to do this action" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service not found or does not belong to the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Fail" },
                    "message": {
                      "type": "string",
                      "example": "No service found with ID 'svc_abc123' for this mentor"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update your own service",
        "tags": ["Services"],
        "description": "Updates a service that belongs to the authenticated mentor. At least one updatable field must be provided.",
        "operationId": "updateMyService",
        "security": [
          { "cookieAuth": [] }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the service to update",
            "schema": {
              "type": "string",
              "example": "svc_abc123"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "minProperties": 1,
                "properties": {
                  "type": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "Career Coaching"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 300,
                    "example": "Focused guidance on resumes, interviews, and career growth."
                  },
                  "sessionTime": {
                    "type": "integer",
                    "minimum": 10,
                    "maximum": 360,
                    "description": "Duration of each session in minutes. Must be a multiple of 5.",
                    "example": 45
                  }
                },
                "example": {
                  "type": "Career Coaching",
                  "sessionTime": 45
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Service updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Success" },
                    "message": { "type": "string", "example": "Service updated successfully" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or incompatible session time with existing availability windows",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "Stop wasting our resources, these don't grow on trees :)" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "sessionTime must be a multiple of 5" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "sessionTime must be at most 360" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "The new session time is greater than at least one of the day availability windows" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "The new session time is greater than at least one of the date availability windows" }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Fail" },
                    "message": { "type": "string", "example": "Unauthorized, No token provided" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user is not a mentor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Fail" },
                    "message": { "type": "string", "example": "Forbidden: You are not authorized to do this action" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service not found or does not belong to the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Fail" },
                    "message": { "type": "string", "example": "You don't have a service with an ID of svc_abc123" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/services/my/{id}/day-availabilities": {
      "post": {
        "summary": "Add a day availability window to your service",
        "tags": ["Services"],
        "description": "Creates a new weekly day availability window for the authenticated mentor's service. Validates minimum duration against the service's session time and checks for conflicts with existing day windows (including adjacent days for after-midnight spillover).",
        "operationId": "addDayAvailability",
        "security": [
          { "cookieAuth": [] }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Service ID",
            "schema": {
              "type": "string",
              "example": "svc_abc123"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["dayOfWeek", "startTime", "duration"],
                "properties": {
                  "dayOfWeek": {
                    "type": "string",
                    "description": "Weekday name; must be one of your validDays list (e.g., monday…sunday).",
                    "example": "monday"
                  },
                  "startTime": {
                    "type": "string",
                    "description": "Start time in 24-hour HH:mm format",
                    "pattern": "^([01]\\d|2[0-3]):([0-5]\\d)$",
                    "example": "09:00"
                  },
                  "duration": {
                    "type": "integer",
                    "minimum": 10,
                    "maximum": 360,
                    "description": "Duration (minutes)",
                    "example": 60
                  }
                },
                "examples": {
                  "basic": {
                    "value": { "dayOfWeek": "monday", "startTime": "09:00", "duration": 60 }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Day availability added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Success" },
                    "message": { "type": "string", "example": "Day availability added successfully" },
                    "newAvailability": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "2d4b57ec-a567-4c89-a5cc-f1c567a930a2"
                        },
                        "dayOfWeek": {
                          "type": "integer",
                          "description": "Numeric representation of day of week (0 = Sunday, 6 = Saturday) shifted back to the user's timezone",
                          "example": 1
                        },
                        "startTime": {
                          "type": "string",
                          "pattern": "^([01]\\d|2[0-3]):([0-5]\\d)$",
                          "description": "Start time in HH:mm (shifted back to the user's timezone)",
                          "example": "09:00"
                        },
                        "duration": {
                          "type": "integer",
                          "example": 60
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or conflict with existing windows",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "duration must be at least 10 minutes" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "duration value is less than the specified session time for the service" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": {
                          "type": "string",
                          "example": "Conflict between newly created availability on Monday and other availability on Sunday: [09:00 - 10:00] conflicts with [23:30 - 00:30]"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid token"
          },
          "403": {
            "description": "Forbidden - user is not a mentor"
          },
          "404": {
            "description": "Service not found or does not belong to the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Fail" },
                    "message": { "type": "string", "example": "You don't have a service with an ID of svc_abc123" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/services/my/{id}/day-availabilities/{avId}": {
      "patch": {
        "summary": "Update a day availability window",
        "tags": ["Services"],
        "description": "Updates a specific weekly day availability window for the authenticated mentor's service. Validates that any new duration is not less than the service's session time and checks conflicts with other day windows (including adjacent days for after‑midnight spillover). At least one attribute must be provided.",
        "operationId": "updateDayAvailability",
        "security": [
          { "cookieAuth": [] }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Service ID",
            "schema": { "type": "string", "example": "svc_abc123" }
          },
          {
            "name": "avId",
            "in": "path",
            "required": true,
            "description": "Day availability ID (UUID)",
            "schema": { "type": "string", "format": "uuid", "example": "2f5a0a1d-0a4c-4a54-9e09-4f6e9d6b2f11" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "minProperties": 1,
                "properties": {
                  "startTime": {
                    "type": "string",
                    "pattern": "^([01]\\d|2[0-3]):([0-5]\\d)$",
                    "description": "Start time in 24-hour HH:mm format",
                    "example": "10:30"
                  },
                  "duration": {
                    "type": "integer",
                    "minimum": 10,
                    "maximum": 360,
                    "description": "Duration (minutes)",
                    "example": 45
                  }
                },
                "examples": {
                  "updateStart": { "value": { "startTime": "10:30" } },
                  "updateDuration": { "value": { "duration": 45 } }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Day availability updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Success" },
                    "message": { "type": "string", "example": "Day availability updated successfully" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or conflict with existing windows",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "At least 1 attribute is required to update" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "new duration value is less than the specified session time for the service" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": {
                          "type": "string",
                          "example": "Conflict between updated availability on Monday and other availability on Sunday: [10:30 - 11:15] conflicts with [23:30 - 00:30]"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "description": "Unauthorized - missing or invalid token" },
          "403": { "description": "Forbidden - user is not a mentor" },
          "404": {
            "description": "Service not found or availability not found/belongs to another user",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "You don't have a service with an ID of svc_abc123" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "Day availability with an ID of 2f5a0a1d-0a4c-4a54-9e09-4f6e9d6b2f11 was not found" }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a day availability window",
        "tags": ["Services"],
        "description": "Deletes a specific weekly day availability window for the authenticated mentor's service.",
        "operationId": "deleteDayAvailability",
        "security": [
          { "cookieAuth": [] }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Service ID",
            "schema": { "type": "string", "example": "svc_abc123" }
          },
          {
            "name": "avId",
            "in": "path",
            "required": true,
            "description": "Day availability ID (UUID)",
            "schema": { "type": "string", "format": "uuid", "example": "2f5a0a1d-0a4c-4a54-9e09-4f6e9d6b2f11" }
          }
        ],
        "responses": {
          "204": { "description": "Day availability deleted successfully (no content)" },
          "401": { "description": "Unauthorized - missing or invalid token" },
          "403": { "description": "Forbidden - user is not a mentor" },
          "404": {
            "description": "Service not found or availability not found/belongs to another user",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "You don't have a service with an ID of svc_abc123" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "Day Availability with an ID of 2f5a0a1d-0a4c-4a54-9e09-4f6e9d6b2f11 was not found" }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/services/my/{id}/availability-exceptions": {
      "post": {
        "summary": "Add an availability exception to your service",
        "tags": ["Services"],
        "description": "Creates a one-time availability window for the authenticated mentor's service. Exceptions can be on any date and may overlap regular weekly availabilities. Validates minimum duration against the service's session time and checks for conflicts with other exceptions on the same or adjacent dates.",
        "operationId": "addAvailabilityException",
        "security": [
          { "cookieAuth": [] }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Service ID",
            "schema": {
              "type": "string",
              "example": "svc_abc123"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["date", "startTime", "duration"],
                "properties": {
                  "date": {
                    "type": "string",
                    "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                    "description": "Date in YYYY-MM-DD format (local to the user before conversion)",
                    "example": "2025-09-15"
                  },
                  "startTime": {
                    "type": "string",
                    "pattern": "^([01]\\d|2[0-3]):([0-5]\\d)$",
                    "description": "Start time in HH:mm format (24-hour clock)",
                    "example": "14:00"
                  },
                  "duration": {
                    "type": "integer",
                    "minimum": 10,
                    "maximum": 360,
                    "description": "Duration in minutes",
                    "example": 120
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Availability Exception created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Success" },
                    "message": { "type": "string", "example": "Availability Exception created successfully" },
                    "newAvailability": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "c7f0c8e4-3f0a-4b5e-9c0b-6b4f1f2a9d11"
                        },
                        "date": {
                          "type": "string",
                          "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
                          "description": "Date in YYYY-MM-DD (shifted back to the user's timezone)",
                          "example": "2025-09-15"
                        },
                        "startTime": {
                          "type": "string",
                          "pattern": "^([01]\\d|2[0-3]):([0-5]\\d)$",
                          "description": "Start time in HH:mm (shifted back to the user's timezone)",
                          "example": "14:00"
                        },
                        "duration": {
                          "type": "integer",
                          "example": 120
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or conflict with an existing exception",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "duration must be at least 10 minutes" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "duration value is less than the specified session time for the service" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": {
                          "type": "string",
                          "example": "Conflict between newly created availability on 2025-09-15 and other availability on 2025-09-14: [14:00 - 16:00] conflicts with [23:30 - 00:30]"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - user is not a mentor" },
          "404": {
            "description": "Service not found or not owned by the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Fail" },
                    "message": { "type": "string", "example": "You don't have a service with an ID of svc_abc123" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/services/my/{id}/availability-exceptions/{avId}": {
      "patch": {
        "summary": "Update an availability exception",
        "tags": ["Services"],
        "description": "Updates a specific availability exception for the authenticated mentor's service. At least one of `startTime` or `duration` must be provided. Checks for conflicts with exceptions on the same or adjacent dates.",
        "operationId": "updateAvailabilityException",
        "security": [
          { "cookieAuth": [] }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Service ID",
            "schema": { "type": "string", "example": "svc_abc123" }
          },
          {
            "name": "avId",
            "in": "path",
            "required": true,
            "description": "Availability Exception ID (UUID)",
            "schema": { "type": "string", "format": "uuid", "example": "f36b58d1-7487-4a74-bc25-9cfc8a6a551a" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "minProperties": 1,
                "properties": {
                  "startTime": {
                    "type": "string",
                    "pattern": "^([01]\\d|2[0-3]):([0-5]\\d)$",
                    "description": "Start time in HH:mm format (24-hour clock)",
                    "example": "15:30"
                  },
                  "duration": {
                    "type": "integer",
                    "minimum": 10,
                    "maximum": 360,
                    "description": "Duration in minutes",
                    "example": 45
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Availability Exception updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Success" },
                    "message": { "type": "string", "example": "Availability Exception updated successfully" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or conflict with an existing exception",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "At least 1 attribute is required to update" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "new duration value is less than the specified session time for the service" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": {
                          "type": "string",
                          "example": "Conflict between updated availability on 2025-09-15 and other availability on 2025-09-14: [15:30 - 16:15] conflicts with [23:30 - 00:30]"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - user is not a mentor" },
          "404": {
            "description": "Service not found or exception not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "You don't have a service with an ID of svc_abc123" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "Availability exception with an ID of f36b58d1-7487-4a74-bc25-9cfc8a6a551a was not found" }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an availability exception",
        "tags": ["Services"],
        "description": "Deletes a specific availability exception for the authenticated mentor's service.",
        "operationId": "deleteAvailabilityException",
        "security": [
          { "cookieAuth": [] }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Service ID",
            "schema": { "type": "string", "example": "svc_abc123" }
          },
          {
            "name": "avId",
            "in": "path",
            "required": true,
            "description": "Availability Exception ID (UUID)",
            "schema": { "type": "string", "format": "uuid", "example": "f36b58d1-7487-4a74-bc25-9cfc8a6a551a" }
          }
        ],
        "responses": {
          "204": { "description": "Availability Exception deleted successfully" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - user is not a mentor" },
          "404": {
            "description": "Service not found or exception not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "You don't have a service with an ID of svc_abc123" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "Day Availability with an ID of f36b58d1-7487-4a74-bc25-9cfc8a6a551a was not found" }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/services/my/{id}/session-requests": {
      "get": {
        "summary": "Get your service's session requests (grouped by status)",
        "tags": ["Services"],
        "description": "Returns all session requests for the authenticated mentor's service, grouped by status. The `date` and `startTime` are returned in the authenticated user's timezone, while `createdAt` remains in UTC.",
        "operationId": "getServiceSessionRequests",
        "security": [
          { "cookieAuth": [] }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the service to retrieve session requests for",
            "schema": {
              "type": "string",
              "example": "svc_abc123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session requests fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Success" },
                    "sessionRequests": {
                      "type": "object",
                      "description": "Object whose keys are statuses (e.g., PENDING, APPROVED, ACCEPTED, REJECTED). Each value is an array of session request objects.",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string", "example": "6cd4339d-b7e8-4f26-9858-9dfa710ff110" },
                            "startTime": { "type": "string", "description": "HH:mm in user's timezone", "example": "14:00" },
                            "duration": { "type": "integer", "description": "Minutes (10–360)", "example": 60 },
                            "date": { "type": "string", "description": "YYYY-MM-DD in user's timezone", "example": "2025-08-12" },
                            "agenda": { "type": "string", "nullable": true, "example": "I want to learn about REST APIs." },
                            "communityId": { "type": "string", "nullable": true, "example": "community456" },
                            "menteeId": { "type": "string", "example": "ahmadanas" },
                            "menteeName": { "type": "string", "example": "Ahmad Anas" },
                            "createdAt": { "type": "string", "format": "date-time", "description": "UTC timestamp", "example": "2025-08-10T18:42:11.000Z" },
                            "rejectionReason": { "type": "string", "nullable": true, "example": "Scheduling conflict" }
                          }
                        }
                      },
                      "example": {
                        "PENDING": [
                          {
                            "id": "56508d44-777e-11f0-b62c-28c5c82c1ac4",
                            "startTime": "09:30",
                            "duration": 45,
                            "date": "2025-08-13",
                            "agenda": "CV review",
                            "communityId": "community456",
                            "menteeId": "user_456",
                            "menteeName": "Omar Hasan",
                            "createdAt": "2025-08-09T17:01:22.000Z",
                            "rejectionReason": null
                          }
                        ],
                        "ACCEPTED": [
                          {
                            "id": "56508d44-777e-11f0-b62c-28c5c82c1ac4",
                            "startTime": "14:00",
                            "duration": 60,
                            "date": "2025-08-12",
                            "agenda": "Mock interview",
                            "communityId": null,
                            "menteeId": "user_123",
                            "menteeName": "Sara Ali",
                            "createdAt": "2025-08-10T09:15:00.000Z",
                            "rejectionReason": null
                          }
                        ],
                        "REJECTED": [
                          {
                            "id": "56508d44-777e-11f0-b62c-28c5c82c1ac4",
                            "startTime": "18:00",
                            "duration": 30,
                            "date": "2025-08-11",
                            "agenda": "Intro call",
                            "communityId": null,
                            "menteeId": "user_789",
                            "menteeName": "Lina Yousef",
                            "createdAt": "2025-08-08T12:40:10.000Z",
                            "rejectionReason": "Out of working hours"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Fail" },
                    "message": { "type": "string", "example": "Unauthorized, No token provided" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user is not a mentor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Fail" },
                    "message": { "type": "string", "example": "Forbidden: You are not authorized to do this action" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service not found or does not belong to the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Fail" },
                    "message": { "type": "string", "example": "You don't have a service with an ID of svc_abc123" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/services/my/{id}/session-requests/{requestId}": {
      "patch": {
        "summary": "Update a session request (status or agenda)",
        "tags": ["Services"],
        "description": "Updates a session request that belongs to the authenticated mentor. You can update the agenda only while the request is PENDING. Status transitions are restricted: PENDING → ACCEPTED or REJECTED, and ACCEPTED → CANCELLED. When changing to ACCEPTED, a Google Calendar event is created; when changing to CANCELLED, the event is deleted. Cancellation is not allowed if there are less than 6 hours left before the session start.",
        "operationId": "updateSessionRequest",
        "security": [
          { "cookieAuth": [] }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Service ID (must belong to the authenticated mentor)",
            "schema": { "type": "string", "example": "svc_abc123" }
          },
          {
            "name": "requestId",
            "in": "path",
            "required": true,
            "description": "Session request ID",
            "schema": { "type": "string", "example": "6cd4339d-b7e8-4f26-9858-9dfa710ff110" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "minProperties": 1,
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "New status for the session request",
                    "enum": ["accepted", "rejected", "cancelled"],
                    "example": "accepted"
                  },
                  "agenda": {
                    "type": "string",
                    "maxLength": 1000,
                    "description": "Short agenda/notes from the mentee; only editable while request is PENDING",
                    "example": "Mock interview focusing on system design basics."
                  },
                  "rejectionReason": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Reason for rejection or cancellation (if applicable)",
                    "example": "Scheduling conflict"
                  }
                },
                "examples": {
                  "accept": {
                    "summary": "Accept a pending request",
                    "value": { "status": "accepted" }
                  },
                  "reject": {
                    "summary": "Reject a pending request with a reason",
                    "value": { "status": "rejected", "rejectionReason": "Out of scope" }
                  },
                  "cancel": {
                    "summary": "Cancel an accepted request (>= 6 hours left)",
                    "value": { "status": "cancelled", "rejectionReason": "Unexpected conflict" }
                  },
                  "editAgenda": {
                    "summary": "Edit agenda while pending",
                    "value": { "agenda": "Please review my latest CV and portfolio." }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session request updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Success" },
                    "message": { "type": "string", "example": "Session request has been updated successfully" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or invalid state transition",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "At least 1 attribute is required to update" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "agenda can be at most 1000 characters" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "rejectionReason can be at most 100 characters" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "You are not allowed update a session agenda unless its status is PENDING" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "You can't change the state to ACCEPTED" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "You can't change the state to REJECTED" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "You can't change the state to CANCELLED" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "You cannot cancel a session less than 6 hours before it starts" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "You should connect your calendar before accepting a session request" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "You should connect your calendar before canceling a session request" }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Fail" },
                    "message": { "type": "string", "example": "Unauthorized, No token provided" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user is not a mentor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "Fail" },
                    "message": { "type": "string", "example": "Forbidden: You are not authorized to do this action" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service not found, or session request not found/belongs to another user",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "You don't have a service with an ID of svc_abc123" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "Session request not found" }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Calendar integration failure",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "Failed to create an event on Google Calendar" }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": { "type": "string", "example": "Fail" },
                        "message": { "type": "string", "example": "Failed to cancel the event on Google Calendar" }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}