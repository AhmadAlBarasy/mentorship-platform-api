generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url = env("DB_STRING")
}

model Users {
  @@map("users")

  id String @db.VarChar(32) @id
  email String @db.VarChar(320) @unique
  name String @db.VarChar(50)
  headline String @db.VarChar(50)
  bio String? @db.VarChar(1000)
  country String @db.VarChar(3)
  password String @db.VarChar(255)
  imageUrl String? @db.VarChar(500) @map("image_url")
  dateJoined DateTime @default(now()) @map("date_joined") // DateTime stores in UTC by default
  skills Json? @db.Json
  timezone String @db.VarChar(32) @default("Etc/UTC")
  role Role

  // Relations
  services Services[]
  sessionRequests SessionRequests[]
  reports UserReports[]
  appTokens AppTokens[]
  authCredentials AuthCredentials?
  bannedUsers BannedUsers?
  links UserLinks[]
  notifications Notifications[]
  participations Participations[]
  communityJoinRequests CommunityJoinRequests[]
  community Communities?

}

model Communities {
  id String @id @db.VarChar(32)
  name String @db.VarChar(50)
  description String @db.VarChar(1000)
  imageUrl String? @db.VarChar(500) @map("image_url")
  managerId String? @unique @db.VarChar(32) @map("manager_id")
  createdAt DateTime @default(now()) @map("created_at") // DateTime stores in UTC by default
  manager Users? @relation(fields: [managerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  participants Participations[]
  joinRequests CommunityJoinRequests[]

}

model CommunityJoinRequests {
  @@map("community_join_requests")

  id String @id @db.VarChar(36) @default(uuid())
  userId String @db.VarChar(32) @map("user_id")
  communityId String @db.VarChar(32) @map("community_id")
  createdAt DateTime @default(now()) @map("created_at")

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  community Communities @relation(fields: [communityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}



model Participations {
  @@map("participations")
  userId String @db.VarChar(32) @map("user_id")
  communityId String @db.VarChar(32) @map("community_id")
  joinedAt DateTime @default(now())
  @@id(fields: [userId, communityId], name: "participation")
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  community Communities @relation(fields: [communityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Notifications {
  id String @id @db.VarChar(32) @default(uuid())
  content String @db.VarChar(100)
  userId String @db.VarChar(32) @map("user_id")
  redirectPath String? @db.VarChar(50) @map("redirect_path")
  isRead Boolean @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
}

model UserLinks {

  @@map("user_links")

  id String @id @db.VarChar(36) @default(uuid())
  userId String @db.VarChar(32) @map("user_id")
  linkName String @db.VarChar(50) @map("link_name")
  linkUrl String @db.VarChar(2048) @map("link_url")
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

}

model BannedUsers {
  @@map("banned_users")

  userId String @id @db.VarChar(32) @map("user_id")
  bannedById String @db.VarChar(32) @map("banned_by_id")
  banReason String @db.VarChar(100) @map("ban_reason")
  bannedAt DateTime @default(now()) @map("banned_at")
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

}

model UserReports {
  @@map("user_reports")

  id String @id @default(uuid()) @db.VarChar(36)
  userId String @db.VarChar(32) @map("user_id")
  reportedUserId String @db.VarChar(32) @map("reported_user_id")
  violation String @db.VarChar(100)
  additionalDetails String? @db.VarChar(500) @map("additional_details")
  resolvedBy String? @db.VarChar(32) @map("resolved_by")
  reportedAt DateTime @default(now()) @map("reported_at")
  reporter Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

}

model AppTokens {
  @@map("app_tokens")
  id String @id @db.VarChar(36) @default(uuid())
  userId String @db.VarChar(32) @map("user_id")
  name String @db.VarChar(50)
  type TokenType
  token String @db.VarChar(512)
  emailOrId String? @db.VarChar(320) @map("email_or_id")
  expiresIn DateTime? @map("expires_in")
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model AuthCredentials {
  @@map("auth_credentials")

  userId String @id @db.VarChar(32)
  resetToken String? @db.VarChar(64) @map("reset_token")
  resetExpiry DateTime? @map("reset_expiry")
  emailVerified Boolean @default(false) @map("email_verified")
  emailVerificationCode String? @db.VarChar(16) @map("email_verification_code")
  twoFactorOTP String? @db.VarChar(6) @map("2fa_otp")
  twoFactorEnabled Boolean @default(false) @map("two_factor_enabled")
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

}

model Services {
  @@map("services")

  id String @db.VarChar(32) @map("id")
  type String @db.VarChar(50)
  description String @db.VarChar(300)
  sessionTime Int @map("session_time")
  deletedAt DateTime? @db.Date @map("deleted_at")
  mentorId String @db.VarChar(32) @map("mentor_id")
  createdAt DateTime @default(now()) @map("created_at")
  @@id(fields: [mentorId, id], name: "service")
  mentor Users @relation(fields: [mentorId], references: [id])
  requests SessionRequests[]
  dayAvailabilites DayAvailabilities[]
  availabilityExceptions AvailabilityExceptions[]

}

model SessionRequests {
  @@map("session_requests")

  id String @db.VarChar(36) @id @default(uuid())
  serviceId String @db.VarChar(32) @map("service_id")
  menteeId String @db.VarChar(32) @map("mentee_id")
  mentorId String @db.VarChar(32) @map("mentor_id")
  startTime DateTime @db.Time() @map("start_time")
  duration Int @map("duration")
  communityId String? @db.VarChar(32) @map("community_id")
  date DateTime @db.Date 
  status SessionStatus @default(PENDING)
  agenda String? @db.VarChar(1000)
  rejectionReason String? @db.VarChar(100) @map("rejection_reason")
  createdAt DateTime @default(now())
  service Services @relation(fields: [mentorId, serviceId], references: [mentorId, id], onDelete: Restrict, onUpdate: Cascade)
  mentee Users @relation(fields: [menteeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

}

model DayAvailabilities {
  @@map("day_availabilities")

  id String @db.VarChar(36) @id @default(uuid())
  dayOfWeek Int @map("day_of_week")
  startTime DateTime @db.Time() @map("start_time")
  duration Int @map("duration")
  mentorId String @db.VarChar(32) @map("mentor_id")
  serviceId String @db.VarChar(32) @map("service_id")
  service Services @relation(fields: [mentorId, serviceId], references: [mentorId, id], onDelete: Cascade, onUpdate: Cascade)

}

model AvailabilityExceptions {
  @@map("availability_exceptions")

  id String @db.VarChar(36) @id @default(uuid())
  date DateTime @db.Date
  startTime DateTime @db.Time() @map("start_time")
  duration Int @map("duration")
  mentorId String @db.VarChar(32) @map("mentor_id")
  serviceId String @db.VarChar(32) @map("service_id")
  service Services @relation(fields: [mentorId, serviceId], references: [mentorId, id], onDelete: Cascade, onUpdate: Cascade)

}

enum Role {
  MENTEE
  MENTOR
  ADMIN
  COMMUNITY_MANAGER
}

enum TokenType {
  REFRESH
  ACCESS
}

enum SessionStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}